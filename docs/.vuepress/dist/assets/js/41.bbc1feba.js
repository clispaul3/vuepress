(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{201:function(n,e,a){"use strict";a.r(e);var t=a(0),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[n._v("#")]),n._v(" 面向对象")]),n._v(" "),a("h2",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法","aria-hidden":"true"}},[n._v("#")]),n._v(" 基本语法")]),n._v(" "),a("ul",[a("li",[n._v("定义")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    class Person {\n        public $name;\n        public $age;\n        var $city;\n        public function say(){\n            echo 'my name is ' . $this->name;\n        }\n    }\n    $ming = new Person();\n    $ming->name = 'xiaoming';\n    $ming->say();\n    $ming->city = 'guangzhou';\n    $class = 'Person';\n    $niu = new $class();\n    $niu->city = 'beijing';\n    var_dump($ming);\n    var_dump($niu);\n\n    注意：1. 不带public的方法默认是public\n         2. var 声明的变量是public\n")])])]),a("ul",[a("li",[n._v("__construct 构造方法")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    class Person{\n        public $name;\n        var $age;\n        function __construct($name,$age = 18){\n            $this->name = $name;\n            $this->age = $age;\n        }\n        function say($city){\n            echo 'I am living in ' .$city;\n        }\n    }\n    $ming = new Person('xiaoming',20);\n    $niu = new Person('xiaoniu');\n    $niu->say('guangzhou');\n    var_dump($ming);\n    var_dump($niu);\n")])])]),a("ul",[a("li",[n._v("extends 继承")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    class Person{\n        public $name;\n        public $age;\n        function __construct($name,$age = 18){\n            $this->$name = $name;\n            $this->$age = $age;\n        }\n        function say(){\n            echo '<p style=\"color:#58bc58;\">my name is ' . $this->name . '</p>';\n        }\n    }\n    class Man extends Person{\n        public $wife;\n        function __construct(){\n\n        }\n        function isMarried(){\n            if($this->wife){\n                echo 'I am married, her name is ' . \"<strong> $this->wife </strong>\";\n            }else{\n                echo 'I am not married' . '<br/>';\n            }\n        }\n    }\n    $ming = new Man('xiaoming',18);\n    $ming->wife = 'liuyifei';\n    $ming->isMarried();\n    $ming->say();\n    注意：1. php是单继承语言，子类只能有一个父类\n         2. 如果子类修改了访问权限，则只能放大权限\n")])])]),a("ul",[a("li",[n._v("访问修饰符\n"),a("ul",[a("li",[n._v("public： 当前类、子类、实例均可访问")]),n._v(" "),a("li",[n._v("protected： 当前类，子类可以访问，实例不可以访问")]),n._v(" "),a("li",[n._v("private： 当前类可以访问，子类、实例不可以方位")])])]),n._v(" "),a("li",[n._v("关键字 final\n"),a("ul",[a("li",[n._v("只能修饰类和成员方法，不能修饰成员属性")]),n._v(" "),a("li",[n._v("修饰的类不能被继承，final修饰的方法不能被重写")])])]),n._v(" "),a("li",[n._v("重载(重写方法)\n"),a("ul",[a("li",[n._v("完全重写")]),n._v(" "),a("li",[n._v("部分重写")])])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Father{\n    public $name;\n    function __construct($name){\n        $this->name = $name;\n    }\n    function say(){\n        echo 'my name is '. $this->name;\n    }\n}\nclass Son{\n    public $age;\n    function __construct($name,$age){\n        parent::__construct($name)\n    }\n    function say(){\n        echo 'my age is '. $this->age;\n    }\n}\n")])])]),a("h2",{attrs:{id:"魔术方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#魔术方法","aria-hidden":"true"}},[n._v("#")]),n._v(" 魔术方法")]),n._v(" "),a("ul",[a("li",[n._v("系统在特定的时机自动调用的方法(只能在当前类中使用，不能在父类&子类中使用)\n"),a("ul",[a("li",[n._v("__get\n"),a("ul",[a("li",[n._v("对象在外部访问 protected & private 修饰的属性是调用")]),n._v(" "),a("li",[n._v("接收一个参数，属性名")])])]),n._v(" "),a("li",[n._v("__set")]),n._v(" "),a("li",[n._v("__unset")]),n._v(" "),a("li",[n._v("__isset")]),n._v(" "),a("li",[n._v("__construct")]),n._v(" "),a("li",[n._v("__destruct")])])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Father{\n    protected $name = 'xiaoming';\n}\nclass Son extends{\n    protected $age = 18;\n    function __get($attr){\n        echo $attr . ':' . $this->$attr;\n    }\n}\n$ming = new Son();\n$ming->name;\n$ming->age;\n")])])]),a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量","aria-hidden":"true"}},[n._v("#")]),n._v(" 常量")]),n._v(" "),a("ul",[a("li",[n._v("const定义一个常量, 定义后不能被修改")]),n._v(" "),a("li",[n._v("在类内部定义常量不能用 define")]),n._v(" "),a("li",[n._v("常量名没有$修饰符")]),n._v(" "),a("li",[n._v("定义常量不能使用访问修饰符")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    class Person{\n        public $name;\n        const COUNTRY = 'CHINA';\n        const PI = 3.14;\n        function say(){\n            echo self::COUNTRY . '</br>';\n        }\n    }\n    $ming = new Person();\n    $ming->say();\n    echo Person::COUNTRY;\n    总结：1. 内部访问 self::const\n         2. 外部访问 Person::const\n")])])]),a("h2",{attrs:{id:"静态属性-静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态属性-静态方法","aria-hidden":"true"}},[n._v("#")]),n._v(" 静态属性 & 静态方法")]),n._v(" "),a("ul",[a("li",[n._v("静态属性和静态方法是类的属性和方法")]),n._v(" "),a("li",[n._v("与成员属性和成员方法相对应")]),n._v(" "),a("li",[n._v("静态属性在定义和访问的时候要加上$")]),n._v(" "),a("li",[n._v("proteced 修饰的静态属性和方法不能在类外访问")]),n._v(" "),a("li",[n._v("静态方法中不能使用$this")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class Person{\n    public static $name = 'php';\n    function say(){\n        echo self::$name;\n    }\n}\necho Person::$name\n")])])]),a("h2",{attrs:{id:"抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类","aria-hidden":"true"}},[n._v("#")]),n._v(" 抽象类")]),n._v(" "),a("ul",[a("li",[n._v("抽象类不能实例化对象")]),n._v(" "),a("li",[n._v("抽象类是为了让子类继承")]),n._v(" "),a("li",[n._v("抽象方法只能是pbulic/protected")]),n._v(" "),a("li",[n._v("抽象方法如果有参数，参数如果有默认值，子类必须一致")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("abstract class Person{\n    function fn1($name = 'php'){\n        echo 'fn1';\n    }\n    function fn2($age){\n        echo 'fn2';\n    }\n}\nabstract class Man extends Person{\n    function fn3($skill = 'html'){\n        echo 'fn3';\n    }\n}\nclass Worker extends Man{\n    function fn4(){\n        echo 'fn4';\n    }\n}\n$ming = new Worker();\n$ming->fn4();\n$ming->fn1();\n")])])]),a("h2",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口","aria-hidden":"true"}},[n._v("#")]),n._v(" 接口")]),n._v(" "),a("ul",[a("li",[n._v("定义: interface   实现: implements")]),n._v(" "),a("li",[n._v("接口中的方法都是抽象方法，且只能用public修饰")]),n._v(" "),a("li",[n._v("接口中的只能规定方法，不能规定属性，但可以定义常量")]),n._v(" "),a("li",[n._v("接口中只有函数的声明，没有函数的实现")]),n._v(" "),a("li",[n._v("接口中的方法必须全部实现")]),n._v(" "),a("li",[n._v("一个类可以先继承父类再实现接口 class Person extends Father implements Freind")]),n._v(" "),a("li",[n._v("一个类可以实现多个接口，中间用逗号隔开，多个接口中的方法不能同名")]),n._v(" "),a("li",[n._v("接口可以继承接口 extends")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("interface Ajax{\n    const user_token = '10086';\n    public function getFriendInfo($uuid);\n}\ninterface Friend{\n    function getFriendList();\n}\nclass User implements Ajax,Friend{\n    public $name;\n    public $uuid;\n    function __construct($uuid = '10000'){\n        $this->uuid = $uuid;\n    }\n    function getFriendInfo($arg = '10000'){\n       echo $arg . ':' . $this->uuid; \n    }\n    function getFriendList(){\n        echo 'friend-list';\n    }\n}\n$ming = new User('10010');\n$ming->getFriendInfo();\n$ming->getFriendList();\n")])])]),a("h2",{attrs:{id:"trait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trait","aria-hidden":"true"}},[n._v("#")]),n._v(" trait")]),n._v(" "),a("ul",[a("li",[n._v("用来模拟实现多继承的")]),n._v(" "),a("li",[n._v("trait的定义和类一样，将关键字替换成trait即可")]),n._v(" "),a("li",[n._v("trait不是实例化")]),n._v(" "),a("li",[n._v("trait可以嵌套trait")]),n._v(" "),a("li",[n._v("方法名冲突解决 inteadof")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    trait Person{\n        function say(){\n            echo 'say';\n        }\n        function eat(){\n            echo 'eat2';\n        }\n    }\n    trait Animate{\n        function run(){\n            echo 'run';\n        }\n        function eat(){\n            echo 'eat1';\n        }\n    }\n    trait Man{\n        use Person;\n        static function skill(){\n            echo 'skill';\n        }\n    }\n    Man::skill();\n    class Worker{\n        use Person,Animate{\n            Person::eat insteadof Animate; // 使用Person中的方法\n            Person:: eat as person_eat; // 将Person中的eat方法重命名为person_eat\n            Animate:: eat as animate_eat; // 将Animate中的eat方法重命名为animate_eat\n        }\n    }\n    class Teacher extends Worker{\n\n    }\n    $ming = new Worker();\n    $ming->say();\n    $ming->eat();\n    $ming->person_eat();\n    $ming->animate_eat();\n    $liu = new Teacher();\n    $liu->say();\n")])])]),a("h2",{attrs:{id:"命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间","aria-hidden":"true"}},[n._v("#")]),n._v(" 命名空间")]),n._v(" "),a("ul",[a("li",[n._v("同一文件中不能出现同名的类")]),n._v(" "),a("li",[n._v("第一个命名空间前面不能有任何代码")]),n._v(" "),a("li",[n._v("命名空间的作用域")]),n._v(" "),a("li",[n._v("使用别名 use A\\Test\\Person as A_Person")]),n._v(" "),a("li",[n._v("根空间、子空间")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("namespace A\\Test;\n    class Person{\n        public $name;\n        function say(){\n            echo 'namespace A';\n        }\n    }\nnamespace B;\n    class Person{\n        public $name;\n        function say(){\n            echo 'namespace B';\n        }\n    }\n    $ming = new Person(); // 使用命名空间B下的类\n    $ming->say();\n    $niu = new \\A\\Test\\Person(); // 使用命名空间A下的类\n    $niu->say();\n    use \\A\\Test\\Person as A_Person; // 使用别名 use\n    $php = new A_Person();\n    $php->say();\n")])])]),a("h2",{attrs:{id:"杂项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杂项","aria-hidden":"true"}},[n._v("#")]),n._v(" 杂项")]),n._v(" "),a("ul",[a("li",[n._v("call_user_func & call_user_func_array")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function test($name,$age){\n    echo $name . ':' . $age;\n}\ncall_user_func('test','php',18);\necho '<br/>';\ncall_user_func_array('test',['css',23]);\nclass Person{\n    function eat(){\n        echo 'eat';\n    }\n    function say($name){\n        call_user_func([$this,'eat']);\n        echo 'class_person' . $name;\n    }\n}\n$ming = new Person();\ncall_user_func([$ming,'say'],'php');\ncall_user_func_array([$ming,'say'],['javascript']);\n")])])]),a("h2",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理","aria-hidden":"true"}},[n._v("#")]),n._v(" 异常处理")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("try {\n    echo '1 <br/>';\n    echo '2 <br/>';\n    throw new Exception('error',1);\n    echo '3 <hr/>'; // 这段代码不会执行\n} catch(Exception $e){\n   echo 'error:' . $e->getMessage() . '<hr/>'; // 异常信息\n   echo 'error:' . $e->getCode() . '<br/>'; // 异常代号\n}\necho '5 <br/>';\n")])])])])}],!1,null,null,null);s.options.__file="面向对象.md";e.default=s.exports}}]);