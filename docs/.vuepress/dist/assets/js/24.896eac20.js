(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{235:function(t,a,e){"use strict";e.r(a);var s=e(0),l=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器","aria-hidden":"true"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),e("ol",[e("li",[t._v("容器是用于存放数据的一种数据结构，用于弥补数组难以扩容、无法存放不同数据类型的缺陷")]),t._v(" "),e("li",[t._v("Collecttion函数库是在java.util包下的一些接口和类，类是用来产生对象存放数据的，而接口是访问数据的方式")]),t._v(" "),e("li",[t._v("Collection函数库只能用来存放对象")]),t._v(" "),e("li",[t._v("存放在Collection库中的数据，被成为元素")]),t._v(" "),e("li",[e("img",{attrs:{src:"/img/java-collection.png",alt:"接口"}}),t._v(" "),e("ul",[e("li",[t._v("Map映射: 键值对映射")]),t._v(" "),e("li",[t._v("List列表: 有序可重复,按照插入的顺序排列")]),t._v(" "),e("li",[t._v("Set集: 无序不可重复，不一定按照插入的顺序排列")])])]),t._v(" "),e("li",[t._v("Java SDK提供的类都是继承自Collection的“子接口”如List和Set")]),t._v(" "),e("li",[t._v("不能通过索引值获取元素")])]),t._v(" "),e("h2",{attrs:{id:"collection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collection","aria-hidden":"true"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),e("h3",{attrs:{id:"常用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),e("ol",[e("li",[t._v("add() 添加一个元素")]),t._v(" "),e("li",[t._v("addAll() 添加一个集合，类似于数组合并")]),t._v(" "),e("li",[t._v("cls.equals(cls2) 判断两个集合是否相等")]),t._v(" "),e("li",[t._v("cls.size() 返回集合元素的个数")]),t._v(" "),e("li",[t._v("cls.isEmpty() 判断集合是否为空")]),t._v(" "),e("li",[t._v("cls.contains(Object obj) 判断集合是否包含某个元素")]),t._v(" "),e("li",[t._v("cls.containsAll() 是否包含某个集合")]),t._v(" "),e("li",[t._v("cls.remove(Object obj) 移除某个元素")]),t._v(" "),e("li",[t._v("cls.removeAll() 删除某个集合")]),t._v(" "),e("li",[t._v("cls.clear() 清空集合")])]),t._v(" "),e("h3",{attrs:{id:"遍历集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#遍历集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历集合")]),t._v(" "),e("ol",[e("li",[t._v("增强for循环")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("for(Object obj:cls){\n    System.out.print(obj);\n}\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Iterator迭代器\n"),e("ul",[e("li",[e("ol",[e("li",[t._v("获取迭代器对象 cls.iterator() "),e("code",[t._v("Iterator items = cls.iterator()")])])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("调用迭代器对象的方法")])]),t._v(" "),e("ul",[e("li",[t._v("hasNext()")]),t._v(" "),e("li",[t._v("next()")])])])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" Iterator items = cls2.iterator();\n while (items.hasNext()) {\n     System.out.println(items.next());\n }\n 注意：必须先调用 hasNext() 方法再调用 next() 方法\n")])])]),e("h2",{attrs:{id:"set集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set集合","aria-hidden":"true"}},[t._v("#")]),t._v(" Set集合")]),t._v(" "),e("ul",[e("li",[t._v("Set接口继承了Collection，拥有Collection的一切方法")]),t._v(" "),e("li",[t._v("HashSet是Set接口的典型实现，大多数时候使用Set集合都使用这个实现类")]),t._v(" "),e("li",[t._v("HashSet按Hash算法来存储集合中的元素")]),t._v(" "),e("li",[t._v("HashSet具有以下特点:\n"),e("ul",[e("li",[t._v("不能保证元素的排列顺序，第一次添加的元素不保证一定排在第一个")]),t._v(" "),e("li",[t._v("HashSet不是线程安全的")])])]),t._v(" "),e("li",[t._v("当想HashSet集合中存入一个元素时，Hash会调用改对象的hashCode()方法来得到\n该对象的hashCode值决定该对象在HashSet中的存储位置")]),t._v(" "),e("li",[t._v("如果两个元素的equals()方法返回true,但他们的hashCode()返回值不相等，hashSet\n将会把他们存储在不同的位置，但依然可以添加成功")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' Set setArrSet = new HashSet();\n setArrSet.add("ABC");\n setArrSet.add("ABC");\n System.out.println(setArrSet.size());  => 1\n 注意：添加相同的元素，不会报错，但添加不进来\n')])])]),e("h2",{attrs:{id:"常用实现类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用实现类","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用实现类")]),t._v(" "),e("ul",[e("li",[t._v("ArrayList")]),t._v(" "),e("li",[t._v("LinkedList")]),t._v(" "),e("li",[t._v("HashSet")]),t._v(" "),e("li",[t._v("HashMap")])])])}],!1,null,null,null);l.options.__file="容器.md";a.default=l.exports}}]);