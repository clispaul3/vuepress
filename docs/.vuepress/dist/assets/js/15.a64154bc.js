(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{221:function(e,t,r){"use strict";r.r(t);var a=r(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"servlet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#servlet","aria-hidden":"true"}},[e._v("#")]),e._v(" Servlet")]),e._v(" "),r("h2",{attrs:{id:"基本介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本介绍")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" Servlet是JavaWeb的三大组件之一，属于动态资源。Servlet的作用是处理请求，服务器会把接\n 收到的请求交给Servlet处理，在Servlet中通常需要：\n   1. 接收请求数据\n   2. 处理请求\n   3. 相应请求\n Servlet需要自己编写，每个Servlet必须实现java.servlet.Servlet接口\n \n")])])]),r("ul",[r("li",[e._v("特性\n"),r("ol",[r("li",[e._v("单例：一个类只有一个对象，可以存在多个Servlet类")]),e._v(" "),r("li",[e._v("Servlet类由我们编写，但对象由服务器创建，并且由服务器来调用相应的方法")])])])]),e._v(" "),r("h2",{attrs:{id:"实现servlet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现servlet","aria-hidden":"true"}},[e._v("#")]),e._v(" 实现Servlet")]),e._v(" "),r("h3",{attrs:{id:"三种实现方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三种实现方式","aria-hidden":"true"}},[e._v("#")]),e._v(" 三种实现方式")]),e._v(" "),r("ol",[r("li",[e._v("实现javax.servlet.Servlet接口")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('package cn.zyb.servlet;\n\n import java.io.IOException;\n\n import javax.servlet.Servlet;\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n\n public class AServlet implements Servlet {\n     /*\n     * 生命周期\n     * 每次修改代码重新编译后调用一次\n     */\n     @Override\n     public void destroy() {\n         System.out.println("destroy()...");\n     }\n\n     @Override\n     public ServletConfig getServletConfig() {\n         System.out.println("getServletconfig()...");\n         return null;\n     }\n\n     @Override\n     public String getServletInfo() {\n         System.out.println("getServletInfo()...");\n         return null;\n     }\n     /*\n     * 生命周期\n     * 调用一次，创建Servlet对象之后调用\n     */\n     @Override\n     public void init(ServletConfig arg0) throws ServletException {\n         System.out.println("init()...");\n\n     }\n     /*\n     * 生命周期\n     * 每次访问调用一次\n     */\n     @Override\n     public void service(ServletRequest arg0, ServletResponse arg1) throws ServletException, IOException {\n         System.out.println("service()...");\n\n     }\n\n }\n\n')])])]),r("ol",{attrs:{start:"2"}},[r("li",[e._v("继承javax.servlet.GenericServlet类")]),e._v(" "),r("li",[e._v("继承javax.servlet.httpServlet类")])]),e._v(" "),r("h2",{attrs:{id:"浏览器访问servlet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器访问servlet","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器访问Servlet")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/java-servlet.jpg",alt:"访问流程"}})]),e._v(" "),r("ol",[r("li",[e._v("给Servlet指定一个Servlet路径\n"),r("ul",[r("li",[e._v("在web.xml中配置Servlet路径")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  <servlet>\n      <servlet-name>servlet</servlet-name>  // 名字可以任意\n      <servlet-class>cn.zyb.servlet.AServlet</servlet-class> // 类路径\n  </servlet>\n  <servlet-mapping>\n      <servlet-name>servlet</servlet-name>  // 名字与上面相同\n      <url-pattern>/AServlet</url-pattern>  // 必须以'/'开头\n  </servlet-mapping>\n")])])])]),e._v(" "),r("li",[e._v("浏览器访问Servlet路径")])]),e._v(" "),r("h2",{attrs:{id:"生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期","aria-hidden":"true"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),r("ol",[r("li",[e._v("init()")]),e._v(" "),r("li",[e._v("service()")]),e._v(" "),r("li",[e._v("doGet()")]),e._v(" "),r("li",[e._v("doPost()")]),e._v(" "),r("li",[e._v("destroy()")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("1. service()可以处理post/get请求，如果Servlet中有service方法，会优先调用\n2. doGet()只能处理get请求\n3. doPost()只能处理post请求\n")])])]),r("h2",{attrs:{id:"常见错误"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见错误","aria-hidden":"true"}},[e._v("#")]),e._v(" 常见错误")]),e._v(" "),r("ol",[r("li",[e._v("404错误：未找到资源")]),e._v(" "),r("li",[e._v("405错误：请求方法不对")]),e._v(" "),r("li",[e._v("500错误：未完成请求，服务器遇到意外情况")])]),e._v(" "),r("h2",{attrs:{id:"httpservletrequest"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#httpservletrequest","aria-hidden":"true"}},[e._v("#")]),e._v(" HttpServletRequest")]),e._v(" "),r("p",[r("code",[e._v("req对象是由Tomcat服务器创建的")])]),e._v(" "),r("ol",[r("li",[e._v("请求头(和浏览器相关)\n"),r("ul",[r("li",[e._v("请求方式：String method = req.getMethod();")]),e._v(" "),r("li",[e._v("请求URL：StringBuffer requrl = req.getRequestURL();")]),e._v(" "),r("li",[e._v("获取URI：String uri = req.getRequstURI();")]),e._v(" "),r("li",[e._v("头信息:\n"),r("ul",[r("li",[e._v("String header = req.getHeader(String name);")]),e._v(" "),r("li",[e._v("遍历")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(' Enumeration enumeration = req.getHeaderNames();\n while(enumeration.hasMoreElements()) {\n     String value = req.getHeader((String) enumeration.nextElement());\n     System.out.println(enumeration.nextElement() + "=" + value);\n }\n')])])])]),e._v(" "),r("li",[e._v("获取协议: String scheme = req.getScheme();")]),e._v(" "),r("li",[e._v('设置请求编码格式：req.setCharaterEncoding("utf-8");')])])]),e._v(" "),r("li",[e._v("请求参数\n"),r("ul",[r("li",[e._v('String username = req.getParamater("username"); => 不能获取复选框的值，会漏值')]),e._v(" "),r("li",[e._v("String queryString = req.getQueryString();")]),e._v(" "),r("li",[e._v('String[] favs = req.getParameterValues("fav"); => 获取复选框的值')]),e._v(" "),r("li",[e._v("遍历请求参数")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    Enumeration enumeration = req.getPramaterNames();\n    while(enumeration.hasMoreElements()) {\n  \t  String value = req.getParamater((String) enumeration.nextElement());\n  \t  System.out.println(enumeration.nextElement() + "=" + value);\n    }\n')])])])])]),e._v(" "),r("h2",{attrs:{id:"httpservletresponse"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#httpservletresponse","aria-hidden":"true"}},[e._v("#")]),e._v(" HttpServletResponse")]),e._v(" "),r("p",[r("code",[e._v("resp对象是由Tomcat服务器创建的")])]),e._v(" "),r("ol",[r("li",[e._v("设置响应头\n"),r("ul",[r("li",[e._v("resp.setHeader(String key,String value); 同键名会被覆盖")]),e._v(" "),r("li",[e._v("resp.addHeader(String key,String value); 同键名不会被覆盖")]),e._v(" "),r("li",[e._v("设置状态码：resp.sendError(int number,String message)")]),e._v(" "),r("li",[e._v("设置响应编码格式：\n"),r("ul",[r("li",[e._v('resp.setHeader("Content-type","text/html;chatset-utf-8");')]),e._v(" "),r("li",[e._v('resp.setContentType("text/html;chatset-utf-8")')])])])])]),e._v(" "),r("li",[e._v("设置响应体\n"),r("ul",[r("li",[e._v("resp.getWriter().writer()")])])])]),e._v(" "),r("h2",{attrs:{id:"网页重定向"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网页重定向","aria-hidden":"true"}},[e._v("#")]),e._v(" 网页重定向")]),e._v(" "),r("ol",[r("li",[e._v('resp.sendRedirect("http://www.baidu.com")')]),e._v(" "),r("li")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('   response.setContentType("text/html;charset=UTF-8");\n   String site = new String("http://www.runoob.com");\n   response.setStatus(response.SC_MOVED_TEMPORARILY);\n   response.setHeader("Location", site);   \n')])])]),r("h2",{attrs:{id:"请求转发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请求转发","aria-hidden":"true"}},[e._v("#")]),e._v(" 请求转发")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('   // AServlet分发至BServlet处理请求\n   req.getRequestDispatch("/BServlet").forward(req,resp);\n')])])]),r("h2",{attrs:{id:"cookie"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cookie","aria-hidden":"true"}},[e._v("#")]),e._v(" cookie")]),e._v(" "),r("ol",[r("li",[e._v("解决不同请求之间数据共享的问题")]),e._v(" "),r("li",[e._v("读取cookie")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" Cookie[] cookies = req.getCookies();\n for(Cookie cookie:cookies) {\n \tif(cookie.getName()!=null) {\n \t\tSystem.out.println(cookie.getName()); // 获取键名\n \t\tSystem.out.println(cookie.getValue()); // 获取值\n \t}\n \tSystem.err.println(cookie);\n }\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[e._v("设置cookie")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(' Cookie cookie = new Cookie("username", "java-cookie");\n cookie.setMaxAge(60); // 60s，如果不设置有效期，浏览器关闭之后cookie会失效\n cookie.setPath("/studyweb/AServlet"); // 设置可访问目录，如果不设置，默认是根目录\n resp.addCookie(cookie);\n')])])]),r("h2",{attrs:{id:"session"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#session","aria-hidden":"true"}},[e._v("#")]),e._v(" session")]),e._v(" "),r("ol",[r("li",[e._v("介绍")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("在WEB开发中，服务器可以为每个用户浏览器创建一个会话对象（session对象），注意：一个浏览器独占一个session对象(默认情况下)。因此，在需要保存用户数据时，服务器程序可以把用户数据写到用户浏览器独占的session中，当用户使用浏览器访问其它程序时，其它程序可以从用户的session中取出该用户的数据，为用户服务。\n")])])]),r("ul",[r("li",[e._v("一个客户端对应一个session对象")]),e._v(" "),r("li",[e._v("session ID通过cookie携带给服务器")])]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("实现逻辑")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("服务器创建session出来后，会把session的id号，以cookie的形式回写给客户机，这样，只要客户机的浏览器不关，再去访问服务器时，都会带着session的id号去，服务器发现客户机浏览器带session id过来了，就会使用内存中与之对应的session为之服务\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[e._v("session对象\n"),r("ul",[r("li",[e._v("读取或创建对象：HTTPSession session = req.getSession(); // 有就读取，无就创建")]),e._v(" "),r("li",[e._v("存数据：session.setAttribute(String key,Object value);")]),e._v(" "),r("li",[e._v("读数据：session.getAttribute(String key);")]),e._v(" "),r("li",[e._v("删数据: session.removeAttribute(String key);")]),e._v(" "),r("li",[e._v("获取ID: session.getId();")]),e._v(" "),r("li",[e._v("判断是否是新创建的: session.isNew();")]),e._v(" "),r("li",[e._v("销毁session对象: session.invalidate();")])])]),e._v(" "),r("li",[e._v("有效期\n"),r("ul",[r("li",[e._v("默认是30分钟")]),e._v(" "),r("li",[e._v("关闭浏览器即失效")]),e._v(" "),r("li",[e._v("通过web.xml配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 以分钟为单位\n<session-config>\n    <session-timeout>10</session-timeout>\n</session-config>\n")])])])])]),e._v(" "),r("h2",{attrs:{id:"servletcontext对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#servletcontext对象","aria-hidden":"true"}},[e._v("#")]),e._v(" ServletContext对象")]),e._v(" "),r("ul",[r("li",[e._v("介绍")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("ServletContext官方叫servlet上下文。服务器会为每一个工程创建一个对象，这个对象就是ServletContext对象。这个对象全局唯一，而且工程内部的所有servlet都共享这个对象。所以叫全局应用程序共享对象。\n")])])]),r("ul",[r("li",[e._v("作用\n"),r("ol",[r("li",[e._v("解决不同用户之间的数据共享问题")]),e._v(" "),r("li",[e._v("是一个域对象")]),e._v(" "),r("li",[e._v("可以读取全局配置参数")]),e._v(" "),r("li",[e._v("可以搜索当前工程目录下的资源文件")]),e._v(" "),r("li",[e._v("可以获取工程名字")])])]),e._v(" "),r("li",[e._v("域对象\n"),r("ul",[r("li",[e._v("概念 "),r("code",[e._v("域对象是服务器在内存上创建的存储空间，用于在不同动态资源（servlet）之间传递与共享数据")])]),e._v(" "),r("li",[e._v("方法\n"),r("ul",[r("li",[e._v("setAttribute(String key,Object value);")]),e._v(" "),r("li",[e._v("getAttribute(String key);")]),e._v(" "),r("li",[e._v("removeAttribute(String key);")])])])])]),e._v(" "),r("li",[e._v("获取servletContext对象\n"),r("ol",[r("li",[e._v("ServletContext obj = this.getServletContext();")]),e._v(" "),r("li",[e._v("ServletContext obj = this.getServletConfig().getServletContext();")]),e._v(" "),r("li",[e._v("ServletContext obj = getServletContext();")])])]),e._v(" "),r("li",[e._v("读取全局配置参数\n"),r("ul",[r("li",[e._v("web.xml配置全局参数")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("  <context-param>\n    <param-name>key1</param-name>\n    <param-value>value1</param-value>\n  </context-param>\n  <context-param>\n    <param-name>key2</param-name>\n    <param-value>value2</param-value>\n  </context-param>\n\n")])])]),r("ul",[r("li",[e._v("读取全局配置参数\n"),r("ol",[r("li",[e._v("getServletContext().getInitParameter(String key); // 获取指定键名的值")]),e._v(" "),r("li",[e._v("getServletContext().getInitParameterNames(); //获取所有键名列表")])])])])]),e._v(" "),r("li",[e._v("获取资源的绝对路径"),r("br"),e._v(" "),r("code",[e._v('String path = getServletContext().getRealPath("/index.jsp");')]),e._v(' // "/"代表webContent目录')])]),e._v(" "),r("h2",{attrs:{id:"servletconfig对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#servletconfig对象","aria-hidden":"true"}},[e._v("#")]),e._v(" servletConfig对象")]),e._v(" "),r("ul",[r("li",[e._v("介绍: 和当前Servlet相关的配置信息")]),e._v(" "),r("li",[e._v("web.xml中配置")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<servlet>\n <servlet-name>servlet</servlet-name>\n <servlet-class>cn.zyb.servlet.AServlet</servlet-class>\n <init-param>\n    <param-name></param-name>\n    <param-value></param-value>\n </init-param>\n</servlet>\n")])])]),r("ul",[r("li",[e._v("获取ServletConfig对象\n"),r("ul",[r("li",[e._v("ServletConfig config = this.getServletConfig();")]),e._v(" "),r("li",[e._v("ServletConfig config = getServletConfig();")])])]),e._v(" "),r("li",[e._v("常用方法\n"),r("ol",[r("li",[e._v("getServletName(); // 获得servlet的名字")]),e._v(" "),r("li",[e._v("getInitParameter(String key); // 获得指定键名的值")]),e._v(" "),r("li",[e._v("getInitParameterNames(); // 获得所有键名组成的数组")])])])]),e._v(" "),r("h2",{attrs:{id:"web-xml"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web-xml","aria-hidden":"true"}},[e._v("#")]),e._v(" web.xml")]),e._v(" "),r("ul",[r("li",[e._v("内容(核心组件)\n"),r("ol",[r("li",[e._v("全局上下文配置")]),e._v(" "),r("li",[e._v("Servlet配置")]),e._v(" "),r("li",[e._v("过滤器配置")]),e._v(" "),r("li",[e._v("监听器配置")])])]),e._v(" "),r("li",[e._v("加载顺序：ServletContext -> context-param -> listener -> filter -> servlet")])])])}],!1,null,null,null);s.options.__file="Servlet.md";t.default=s.exports}}]);